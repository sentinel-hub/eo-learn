[tool.black]
line-length = 120
preview = true

[tool.isort]
profile = "black"
known_first_party = "sentinelhub"
known_absolute = "eolearn"
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "ABSOLUTE",
    "LOCALFOLDER",
]
line_length = 120

[tool.ruff]
exclude = [".git", "__pycache__", "build", "dist"]
ignore = [
    "C408",   # complains about `dict()` calls, we use them to avoid too many " in the code
    "SIM117", # wants to always combine `with` statements, gets ugly for us
    "SIM108", # tries to aggresively inline `if`, not always readable
    "A003",   # complains when ATTRIBUTES shadow builtins, we have objects that implement `filter` and such
    "COM812", # trailing comma missing, fights with black
    "PD011",  # suggests `.to_numpy` instead of `.values`, also does this for non-pandas objects...
    # potentially fixable
    "B904", # want `raise ... from None` instead of just `raise ...`
    "B028", # always demans a stacklevel argument when warning
]
line-length = 120
select = [
    "C4",
    "C90",
    "E",
    "F",
    "SIM",
    "W",
    "N",
    "YTT",
    "B",
    "A",
    "COM",
    "T10",
    "ISC",
    "ICN",
    "G",
    "PIE",
    "T20",
    "RET",
    "SLF",
    "ARG",
    "PD",
    "PGH",
    "FLY",
    "NPY",
    "RUF",
]
target-version = "py38"

[tool.ruff.mccabe]
max-complexity = 15

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pylint.format]
max-line-length = 120

[tool.pylint.messages_control]
disable = [
    "no-member",
    "arguments-differ",
    "assignment-from-no-return",
    "unsubscriptable-object",
    "invalid-unary-operand-type",
    "unspecified-encoding",
    "unnecessary-ellipsis",
    "use-dict-literal",
]

[tool.pylint.design]
max-args = 15
max-branches = 15
max-attributes = 20
max-locals = 21
min-public-methods = 0

[tool.pylint.similarities]
min-similarity-lines = 5

[tool.pylint.classes]
valid-metaclass-classmethod-first-arg = "mcs"

[tool.pylint.exceptions]
overgeneral-exceptions = "builtins.Exception"

[tool.pylint.refactoring]
max-nested-blocks = 7

[tool.pytest.ini_options]
markers = ["sh_integration: marks integration tests with Sentinel Hub service"]

[tool.coverage.run]
source = [
    "core",
    "coregistration",
    "features",
    "geometry",
    "io",
    "mask",
    "ml_tools",
    "visualization",
]

[tool.coverage.report]
omit = ["*/setup.py", "*/tests/*", "*/__init__.py"]

[tool.nbqa.addopts]
ruff = ["--extend-ignore=E402,T201,B015,B018,NPY002"]
# E402 -> imports on top
# T201 -> print found
# B015 & B018 -> useless expression (used to show values in ipynb)
# NPY002 -> use RNG instead of old numpy.random

[tool.mypy]
follow_imports = "normal"
ignore_missing_imports = true
show_column_numbers = true
show_error_codes = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
warn_unreachable = true
strict_equality = true
pretty = true
